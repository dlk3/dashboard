#!/usr/bin/env python

#################################################################################
#  Copyright (C) 2022  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public License,
#  v. 2.0.  If a copy of the MPL was not distbuted with this file, You can
#  obtain one at https://mozilla.org/MPL/2.0/.
#################################################################################
#  Fetch weather data from the NOAA web site for a specific location
#  and update a JSON object stored on disk with that information.
#
#  This is designed as a forever loop so that it can be run as a daemon.
#
#  The output format used here is designed specifically to match another app
#  I have that consumes this data.  NOAA provides much more data than this
#  script outputs.
#
#  NOAA updates their current observations roughly every 30 minutes and forecasts
#  about once an hour.
#
#  Temperature and wind speed observations from MESONET weather stations are used
#  when available as they can be more accurate than the NOAA weather stations.
#  See https://developers.synopticdata.com/mesonet for info on their REST API.
#################################################################################

from astral import LocationInfo				# dnf install python3-astral
from astral.sun import sun
import datetime
from geopy.distance import great_circle		# dnf install python3-geopy
import isodate								# dnf install python3-isodate
import json
import pytz									# dnf install python3-pytz
import requests								# dnf install python3-requests
import sys
import time

#  HTTP GET request headers used by all NOAA api calls
#
#  See this page for info on NOAA's User-Agent string requirements:
#  https://www.weather.gov/documentation/services-web-api
request_headers = {
	'User-Agent': '(David King, dave@daveking.com)',
	'Accept': 'application/geo+json',
	'Cache-Control': 'no-cache'
}

#  Logging messages
def log(message):
	timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
	with open(logfile, 'a') as f:
		print(timestamp, message, file=f)
	
#  Celcius to fahrenheit
def degC2degF(degC):
	try:
		return round((degC * 9/5) + 32)
	except Exception as e:
		log('degC2DegF function threw an exception for value "{}"'.format(degC))
		log(e)
		return None

#  Kilometers per hour to miles per hour
def kmph2mph(kmph):
	try:
		return round(kmph * 0.621371)
	except Exception as e:
		log('kmph2mph function threw an exception for value "{}"'.format(kmph))
		log(e)
		return None
		
#  Meters per second to miles per hour
def mps2mph(mps):
	try:
		return round(mps * 2.237)
	except Exception as e:
		log('mps2mph function threw an exception for value "{}"'.format(mps))
		log(e)
		return None
		
#  Parse the ISO8601 date strings with interval/duration specs that NOAA uses
#  in the hourly data
def parseInterval(time_str, tz_string=None):
	"""
	time_str must be an ISO8601-compliant time string, optionally including a
	duration specification, for example: 2020-04-10T16:00:00-00:00/P6DT22H
	          
	This function returns a tuple containing two datetime objects. If a duration
	specification was part of the time_str provided, then "start time" and "end time"
	datetime objects will be returned.  If the time_str was just a simple date and time,
	without any duration specification, then the first element of the tuple will be
	the "start time" datetime object and the second element will be null.
	"""
	list = []
	split_time_str = time_str.split('/')
	list.append(isodate.parse_datetime(split_time_str[0]))
	if len(split_time_str) == 2:
		list.append(list[0] + isodate.parse_duration(split_time_str[1]))
	else:
		list.append(None)
	return list

#---------------------------   L o c a t i o n   ---------------------------#

#  Update the location information section of the weather_data JSON object
def getLocationInfo(latitude, longitude):
	global weather_data
	
	#  Run this on a 5 minute loop until it completes successfully
	while True:
		
		#  Get the NOAA location info, timezone and forecast URL links for this location 
		#  from their "points" service, based on the lat/long.
		url = 'https://api.weather.gov/points/{},{}'.format(latitude, longitude)
		response = requests.get(url, headers=request_headers)
		if response.status_code == 200:
			r = response.json()

			#  Start populating the JSON object
			weather_data['latitude'] = latitude
			weather_data['longitude'] = longitude
			weather_data['timezone'] = r['properties']['timeZone']
			weather_data['observationStationListURL'] = r['properties']['observationStations']
			weather_data['forecastURL'] = r['properties']['forecast']
			weather_data['forecastGridDataURL'] = r['properties']['forecastGridData']
			weather_data['alertsURL'] = 'https://api.weather.gov/alerts?point={},{}'.format(latitude, longitude)
			
			#  Calculate the UTC offset for this timezone
			tz_now = datetime.datetime.now(pytz.timezone(weather_data['timezone']))
			weather_data['tz_offset'] = tz_now.utcoffset().total_seconds() / 3600
			
		else:
			log('Status code {} returned for {}'.format(response.status_code, url))
			log('Will wait 5 minutes and then retry')
			time.sleep(5 * 60)
			continue

		#  Get the list of NOAA observation stations associated with this location
		#  and figure out which one is closest to us
		response = requests.get(weather_data['observationStationListURL'], headers=request_headers)
		if response.status_code == 200:
			r = response.json()
			nearest = -1
			for feature in r['features']:
				distance = great_circle((latitude, longitude), (feature['geometry']['coordinates'][1], feature['geometry']['coordinates'][0])).miles
				if nearest == -1 or distance < nearest:
					nearest = distance
					weather_data['observationStationURL'] = feature['id']
					weather_data['observationStationDistance'] = distance
		else:
			log('Status code {} returned for {}'.format(response.status_code, weather_data['observationStationListURL']))
			log('Will wait 5 minutes and then retry')
			time.sleep(5 * 60)
			continue

		#  Put a location information updated timestamp into the JSON object
		weather_data['locationInfoUpdated'] = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
			
		return True
		
#--------------------------   C u r r e n t l y   --------------------------#
		
#  Update the current conditions section of the weather_data JSON object
def getCurrentConditions():
	global weather_data	
	
	ok_to_continue = False
	while not ok_to_continue:
		
		#  Assume that everything will end well
		ok_to_continue = True

		#  Clear out any MESONET metadata from a prior run
		if 'mesonetObservationStation' in weather_data:
			del weather_data['mesonetObservationStation']
			
		#  Get the current conditions from the closest NOAA observation station
		response = requests.get(weather_data['observationStationURL'] + '/observations/latest', headers=request_headers)
		if response.status_code == 200:
			r = response.json()
			if 'current' not in weather_data:
				weather_data['current'] = {}

			#  Check to make sure all the data we need is there and put it into
			#  weather_data['current'] if it is
			if 'icon' in r['properties'] and r['properties']['icon'] is not None:
				weather_data['current']['icon'] = r['properties']['icon'].split('?')[0] + "?size=large"
			else:
				ok_to_continue = False
			if 'textDescription' in r['properties'] and r['properties']['textDescription'] is not None:
				weather_data['current']['description'] = r['properties']['textDescription']
			else:
				ok_to_continue = False
				
			#  Get temp and wind speed from a nearby MESONET station, if we can
			mesonet_data = getMESONET(weather_data['observationStationDistance'])
			
			used_mesonet = False
			if 'temperature' in mesonet_data:
				weather_data['current']['temperature'] = mesonet_data['temperature']
				used_mesonet = True
			elif 'temperature' in r['properties'] and r['properties']['temperature']['value'] is not None:
				weather_data['current']['temperature'] = degC2degF(r['properties']['temperature']['value'])
			else:
				ok_to_continue = False
				
			if 'wind_speed' in mesonet_data:
				weather_data['current']['wind_speed'] = mesonet_data['wind_speed']
				used_mesonet = True
			elif 'windSpeed' in r['properties'] and r['properties']['windSpeed']['value'] is not None:
				weather_data['current']['wind_speed'] = kmph2mph(r['properties']['windSpeed']['value'])
			else:
				ok_to_continue = False
			
			#  If we used MESONET data then add the station metadata	
			if used_mesonet:
				weather_data['mesonetObservationStation'] = {}
				weather_data['mesonetObservationStation']['name'] = mesonet_data['mesonetObservationStationName']
				weather_data['mesonetObservationStation']['id'] = mesonet_data['mesonetObservationStationID']
				weather_data['mesonetObservationStation']['distance'] = mesonet_data['mesonetObservationStationDistance']
				
			#  If data was missing
			if not ok_to_continue:
				log(json.dumps(r['properties'], indent=4))
				log('Properties we need were missing from {}'.format(weather_data['observationStationURL'] + '/observations/latest'))
				log('Will wait 5 minutes and then retry')
				time.sleep(5 * 60)
		else:
			#  If the requests.get failed
			log('Status code {} returned for {}'.format(response.status_code, weather_data['observationStationURL'] + '/observations/latest'))
			log('Will wait 5 minutes and then retry')
			ok_to_continue = False
			time.sleep(5 * 60)
			
	return True
	
#  Get a better reading of the temperature and wind speed from a MESONET
#  weather station closer to us, if there is one
def getMESONET(distance):

	#  Only use MESONET station observations if they are less than one hour old
	def getSensorReading(sensor_variable_name):
		keys = sensor_variable_name.keys()
		for key in keys:
			first_key = key
			break
		local_tz = datetime.timezone(datetime.timedelta(hours=weather_data['tz_offset']))
		now = datetime.datetime.now(local_tz)
		o_time = datetime.datetime.strptime(station['OBSERVATIONS'][first_key]['date_time'], '%Y-%m-%dT%H:%M:%S%z')
		if now - o_time < datetime.timedelta(hours=1):
			return station['OBSERVATIONS'][first_key]['value']
		return

	#  Default result = empty dictionary
	mesonet_data = {} 
	
	#  Ask for data from all of the stations within "distance" (in miles) of our lat/long
	mesonet_url = 'https://api.synopticdata.com/v2/stations/latest?radius={},{},{}&token={}'.format(weather_data['latitude'], weather_data['longitude'], distance, synoptic_token)
	response = requests.get(mesonet_url, headers=request_headers)
	if response.status_code == 200:
		r = response.json()
		#print(json.dumps(r, indent=4))
		#  It might be true that there are no closer MESONET stations.
		#  Check if we got back data from at least one station.
		if r['SUMMARY']['NUMBER_OF_OBJECTS'] > 0:
			for station in r['STATION']:
				#  We want the closest, so we check them all
				if station['DISTANCE'] < distance:
					#print(json.dumps(station, indent=4))
					if 'air_temp' in station['SENSOR_VARIABLES'] and 'wind_speed' in station['SENSOR_VARIABLES']:
						station_used = False
						result = getSensorReading(station['SENSOR_VARIABLES']['air_temp'])
						if result != None:
							mesonet_data['temperature'] = degC2degF(result)	
							station_used = True
						result = getSensorReading(station['SENSOR_VARIABLES']['wind_speed'])
						if result != None:
							mesonet_data['wind_speed'] = mps2mph(result)
							station_used = True
						if station_used:
							distance = station['DISTANCE']
							mesonet_data['mesonetObservationStationDistance'] = station['DISTANCE']
							mesonet_data['mesonetObservationStationName'] = station['NAME']
							mesonet_data['mesonetObservationStationID'] = station['STID']
							#print('MESONET station name: {}'.format(mesonet_data['mesonetObservationStationName']))
							#print('MESONET station id: {}'.format(mesonet_data['mesonetObservationStationID']))
							#print('MESONET station distance: {}'.format(mesonet_data['mesonetObservationStationDistance']))
							#print('MESONET station temperature: {}'.format(mesonet_data['temperature']))
							#print('MESONET station wind speed: {}'.format(mesonet_data['wind_speed']))
	else:
		#  If the requests.get failed
		log('Status code {} returned for {}'.format(response.status_code, mesonet_url))
		log('No results returned to caller')
		
	return mesonet_data
			
#------------------------------   D a i l y   ------------------------------#

#  Update the daily forecasts section of thr qweather_data JSON object
def getDailyForecasts():
	global weather_data
	
	#  Define a location for the astral function that calculates sunrise and sunset
	astral_location = LocationInfo('dummy_name', 'dummy_region', weather_data['timezone'], weather_data['latitude'], weather_data['longitude'])
	
	#  Create a tzinfo object for the local timezone
	local_tz = datetime.timezone(datetime.timedelta(hours=weather_data['tz_offset']))
	
	#  A "only do it once" flag for updating the current forecasts in the for loop below
	have_current_forecasts = False
	
	#  Get the daily forecasts for the next week for this location
	response = requests.get(weather_data['forecastURL'], headers=request_headers)
	if response.status_code == 200:
		r = response.json()
		#print(json.dumps(r['properties']['periods'], indent=4))
		daily_data = []
		for days in range(0, 7):
			day = {}
			d = datetime.datetime.now(local_tz) + datetime.timedelta(days=days)
			day['date'] = d.strftime('%Y-%m-%d')
			the_sun = sun(astral_location.observer, date=d)
			day['sunrise'] = the_sun['sunrise'].strftime('%Y-%m-%dT%H:%M:%S%z')
			day['sunset'] = the_sun['sunset'].strftime('%Y-%m-%dT%H:%M:%S%z')
			
			#  Use data from the prior run as a default
			if 'daily' in weather_data:
				for old_day in weather_data['daily']:
					if old_day['date'] == day['date']:
						if 'icon' in old_day:
							day['icon'] = old_day['icon']
						if 'high' in old_day:
							day['high'] = old_day['high']
						if 'low' in old_day:
							day['low'] = old_day['low']
						break	
			
			#  Get new data
			found_new_icon = False
			for period in r['properties']['periods']:
				period_starttime = datetime.datetime.strptime(period['startTime'], '%Y-%m-%dT%H:%M:%S%z')
				period_endtime = datetime.datetime.strptime(period['endTime'], '%Y-%m-%dT%H:%M:%S%z')
				if period_starttime.strftime('%Y-%m-%d') == day['date']:
					#  Update current forecasts (take the first ones we find)
					if not have_current_forecasts:
					
						#  TODO: I'm not sure whether these are nulls or empty
						#  strings when no data is returned and I want to find out
						if period['shortForecast'] and period['detailedForecast']:
							if period['shortForecast'] != '' and period['detailedForecast'] != '':
								#  Update the current conditions section with the current short-term forecast
								weather_data['current']['shortForecast'] = period['shortForecast']
								weather_data['current']['detailedForecast'] = period['detailedForecast']
								have_current_forecasts = True
							else:
								log('NOAA returned period[\'shortForecast\'] or period[\'detailedForecast\'] as an empty string in the daily data')
								log(period)
						else:
							log('NOAA returned period[\'shortForecast\'] or period[\'detailedForecast\'] as null in the daily data')
							log(period)
					
					#  Day-time data
					if period['isDaytime']:
						day['icon'] = period['icon'].split('?')[0] + "?size=large"
						found_new_icon = True
						if 'temperature' in period and period['temperature'] is not None:
							day['high'] = period['temperature']
					#  Night-time data
					else:
						if not found_new_icon:
							day['icon'] = period['icon'].split('?')[0] + "?size=large"
							found_new_icon = True
						if 'temperature' in period and period['temperature'] is not None:
							day['low'] = period['temperature']
					
					#  Swap high and low if they are reversed
					if ('high', 'low') in day:
						if day['high'] < day['low']:
							t = day['high']
							day['high'] = day['low']
							day['low'] = t
			
			#  Add the day's data to the array			
			daily_data.append(day)

		#  Update the array in the JSON object
		weather_data['daily'] = daily_data

	else:
		log('Status code {} returned for {}'.format(response.status_code, weather_data['forecastURL']))
		log('The daily weather forcasts have not been updated. Some other data elements may have been updated however.')
		return False

	return True
	
#-----------------------------   H o u r l y   -----------------------------#

#  Update the hourly forecasts section of the weather_data JSON object
def getHourlyForecasts():
	global weather_data
	
	#  Create a tzinfo object for the local timezone
	local_tz = datetime.timezone(datetime.timedelta(hours=weather_data['tz_offset']))
			
	#  Get the hourly forecasts for the next 48 hours for this location
	response = requests.get(weather_data['forecastGridDataURL'], headers=request_headers)
	if response.status_code == 200:
		r = response.json()
		#print(json.dumps(r['properties'], indent=4))
		if 'hourly' not in weather_data:
			weather_data['hourly'] = {}
		hourly_data = []
		for hours in range(0, 48):
			hour = {}
			d = datetime.datetime.now(local_tz) + datetime.timedelta(hours=hours)
			hour['time'] = d.strftime('%Y-%m-%dT%H:00:00%z')
			
			#  Load defaults from stored JSON object
			for h in weather_data['hourly']:
				if 'time' in h and h['time'] == hour['time']:
					if 'temperature' in h:
						hour['temperature'] = h['temperature']
					if 'windSpeed' in h:
						hour['windSpeed'] = h['windSpeed']
					if 'precipPercent' in h:
						hour['precipPercent'] = h['precipPercent']
					break
			
			#  Update with new values from NOAA query response
			for item in r['properties']['temperature']['values']:
				start_time, end_time = parseInterval(item['validTime'])
				if d >= start_time and d <= end_time:
					hour['temperature'] = degC2degF(item['value'])
					break
			for item in r['properties']['windSpeed']['values']:
				start_time, end_time = parseInterval(item['validTime'])
				if d >= start_time and d <= end_time:
					hour['windSpeed'] = kmph2mph(item['value'])
					break
			for item in r['properties']['probabilityOfPrecipitation']['values']:
				start_time, end_time = parseInterval(item['validTime'])
				if d >= start_time and d <= end_time:
					hour['precipPercent'] = item['value']
					break
					
			hourly_data.append(hour)

		weather_data['hourly'] = hourly_data
	else:
		log('Status code {} returned for {}'.format(response.status_code, weather_data['forecastGridDataURL']))
		log('The hourly forecasts have not been updated. Some other data elements may have been updated however.')
		return False
		
	return True

#-----------------------------   A l e r t s   -----------------------------#

#  Update the alerts section of the weather_data JSON object
def getAlerts():
	global weather_data
	
	#  Create a tzinfo object for the local timezone
	local_tz = datetime.timezone(datetime.timedelta(hours=weather_data['tz_offset']))
			
	#  Get any active alerts for this location
	response = requests.get(weather_data['alertsURL'], headers=request_headers)
	if response.status_code == 200:
		r = response.json()
		#print(json.dumps(r['features'], indent=4))
		alerts = []
		now = datetime.datetime.now(local_tz)
		for item in r['features'][::-1]:
			onset_time = datetime.datetime.strptime(item['properties']['onset'], '%Y-%m-%dT%H:%M:%S%z')
			expires_time = datetime.datetime.strptime(item['properties']['expires'], '%Y-%m-%dT%H:%M:%S%z')
			
			if item['properties']['messageType'] == 'Cancel':
				#  Remove the referenced alerts from the list
				for ref in item['properties']['references']:
					for a in alerts:
						if a['id'] == ref['identifier']:
							alerts.remove(a)
			elif item['properties']['messageType'] == 'Update':
				#  Replace the referenced alerts with this one  
				#  (TODO: do we need to do a scan for duplicates after this?)
				for ref in item['properties']['references']:
					for a in alerts:
						if a['id'] == ref['identifier']:
							a['id'] = item['properties']['id'],
							a['onset'] = item['properties']['onset']
							a['expires'] = item['properties']['expires']
							a['headline'] = item['properties']['headline']
							a['description'] = item['properties']['description']
			else:
				#  Add the alert to the list
				if onset_time <= now and expires_time >= now:
					alerts.append({
						'id': item['properties']['id'],
						'onset': item['properties']['onset'],
						'expires': item['properties']['expires'],
						'headline': item['properties']['headline'],
						'description': item['properties']['description']
					})

		#  Put the alerts into the JSON object
		weather_data['alerts'] = alerts
		
	else:
		log('Status code {} returned for {}'.format(response.status_code, weather_data['alertsURL']))
		log('The alerts have not been updated. Some other data elements may have been updated however.')
		return False
		
	return True

#-------------------------------   M a i n   -------------------------------#
	
def main():
	global logfile, weather_data, synoptic_token
	
	#  Get latitude, longitude, weather_data_file from the command line
	#  Log file name can also be supplied as an optional 4th argument
	logfile = None
	if len(sys.argv) < 6:
		print('Please provide the latitude, longitude, Synoptic API token, output, and log file name values on the command line:')
		print('\t{} latitude longitude api_token outputfilename logfilename'.format(sys.argv[0]))
		exit(1)
	try:
		latitude = float(sys.argv[1])
		longitude = float(sys.argv[2])
	except Exception as e:
		print('Latitude and longitude must be valid floating point numbers')
		print('\t{} latitude longitude api_token outputfilename logfilename'.format(sys.argv[0]))
		exit(1)
	synoptic_token = sys.argv[3]
	weather_data_file = sys.argv[4]
	logfile = sys.argv[5]

	#  See if writing to the log works
	log('{} running'.format(sys.argv[0]))

	#  Run the process on a continuous loop with a 30 minute sleep between iterations
	while True:

		#  Read in the stored JSON object, if it exists
		try:
			with open(weather_data_file, 'r') as f:
				weather_data = json.load(f)
		except FileNotFoundError:
			weather_data = {}

		#  Update the location information section if it doesn't exist or
		#  if it is more than one day old.
		if 'locationInfoUpdated' not in weather_data or datetime.datetime.now() - datetime.datetime.strptime(weather_data['locationInfoUpdated'], '%Y-%m-%dT%H:%M:%S') > datetime.timedelta(days=1):
			getLocationInfo(latitude, longitude)
		
		#  Update the weather data
		getCurrentConditions()
		getDailyForecasts()
		getHourlyForecasts()
		getAlerts()
		
		#  Put a weather data updated timestamp into the JSON object
		local_tz = datetime.timezone(datetime.timedelta(hours=weather_data['tz_offset']))
		weather_data['weatherDataUpdated'] = datetime.datetime.now(local_tz).strftime('%Y-%m-%dT%H:%M:%S%z')
		
		#  Serialize the JSON object to a file
		try:	
			with open(weather_data_file, 'w') as f:
				json.dump(weather_data, f)
		except Exception as e:
			log('Failed while writing the JSON object to the "{}" file'.format(weather_data_file))
			log(e)
			exit(1)
			
		#print(json.dumps(weather_data, indent=4))

		#  Wait for 30 minutes
		time.sleep(30 * 60)

if __name__ == '__main__':
	main()
